# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AddOrderRes implements IAddRecordRes {
  id: ID!
  created_at: DateTime!
}

interface IAddRecordRes {
  id: ID!
  created_at: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UpdateProductCartRes implements IUpdateRecordRes {
  updated_at: DateTime!
}

interface IUpdateRecordRes {
  updated_at: DateTime!
}

type UpdateProductRes implements IUpdateRecordRes {
  updated_at: DateTime!
}

type Categories {
  id: ID!
  category_name: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type ProductImagesType {
  id: ID!
  product_id: String!
  image_url: String!
  public_id: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type ProductType {
  id: ID!
  product_name: String!
  description: String!
  stock: Float!
  is_available: Boolean!
  unit_price: Float!
  categories: [Categories!]!
  images: [ProductImagesType!]!
  created_at: DateTime!
  updated_at: DateTime!
}

type PageInfoType {
  start_cursor: String
  end_cursor: String
  has_next_page: Boolean!
  has_previous_page: Boolean!
}

type ProductEdgeType {
  cursor: String!
  node: ProductType!
}

type GetProductsRes {
  total_count: Int!
  edges: [ProductEdgeType!]
  nodes: [ProductType!]
  pageInfo: PageInfoType!
}

type RemoveProductFromCartRes implements IRemoveRecordRes {
  deleted_at: DateTime!
}

interface IRemoveRecordRes {
  deleted_at: DateTime!
}

type CartItemType {
  id: ID!
  product: ProductType!
  quantity: Float!
  created_at: DateTime!
  updated_at: DateTime!
}

type CartType {
  id: ID!
  cartItems: [CartItemType!]!
  created_at: DateTime!
  updated_at: DateTime!
}

type OrderDetailType {
  id: String!
  order_id: String!
  product_id: String!
  quantity: Int!
  unit_price: Int!
  created_at: DateTime!
  updated_at: DateTime!
  product: ProductType!
}

type UserRoles {
  id: ID!
  role: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type User {
  id: ID!
  first_name: String!
  last_name: String!
  email: String!
  is_email_verified: Boolean!
  role_id: Float!
  address: String!
  password: String!
  created_at: DateTime!
  updated_at: DateTime!
  role: UserRoles!
}

type PaymentStatus {
  id: ID!
  status: String!
  created_at: DateTime!
  updated_at: DateTime!
}

type PaymentDetail {
  id: ID!
  payment_intent_id: String!
  payment_method_id: String!
  order_id: String!
  amount: Float!
  status: PaymentStatus!
  created_at: DateTime!
  updated_at: DateTime!
  payment_date: DateTime!
}

type OrderType {
  id: ID!
  user_id: String!
  address: String!
  nearby_landmark: String!
  created_at: DateTime!
  updated_at: DateTime!
  user: User
  order_details: [OrderDetailType!]!
  payment_details: PaymentDetail
}

type OrderTypeEdge {
  cursor: String!
  node: OrderType!
}

type PaginatedOrdersType {
  edges: [OrderTypeEdge!]
  nodes: [OrderType!]
  pageInfo: PageInfoType!
  totalCount: Int!
}

type AddProductRes implements IAddRecordRes {
  id: ID!
  created_at: DateTime!
}

type RemoveProductRes implements IRemoveRecordRes {
  deleted_at: DateTime!
}

type FavoriteType {
  id: ID!
  user_id: String!
  product_id: String!
  product: ProductType!
  created_at: DateTime!
  updated_at: DateTime!
}

type DeleteCategoryRes {
  deleted_at: DateTime!
}

type AddCategoryRes {
  id: Int!
  created_at: DateTime!
}

type Query {
  Orders: [String!]!
  getPaginatedOrders(data: GetOrdersArgs!): PaginatedOrdersType!
  getCarts: CartType!
  getProducts(data: GetProductsArgs!): GetProductsRes!
  getFavorites: [FavoriteType!]!
  getCategories: [Categories!]!
}

input GetOrdersArgs {
  first: Int!
  after: String
  user_id: ID
}

input GetProductsArgs {
  first: Int!
  after: String
  category_ids: [Int!]
}

type Mutation {
  addOrder(data: AddOrderArgs!): AddOrderRes!
  addOrUpdateCartProduct(data: AddOrUpdateProductCartArgs!): UpdateProductCartRes!
  removeProductFromCart(data: RemoveProductFromCartArgs!): RemoveProductFromCartRes!
  addProduct(data: AddProductArgs!): AddProductRes!
  updateProduct(id: String!, data: UpdateProductArgs!): UpdateProductRes!
  removeProduct(id: String!): RemoveProductRes!
  updateProductCategories(data: UpdateProductCategoriesArgs!): UpdateProductRes!
  checkOrUncheckAsFavorite(data: CheckUncheckFavoriteArgs!): FavoriteResponse!
  addCategory(data: AddCategoryReq!): AddCategoryRes!
  deleteCategory(data: DeleteCategoryReq!): DeleteCategoryRes!
}

input AddOrderArgs {
  cart_id: ID!
  address: String
  nearbyLandmark: String
}

input AddOrUpdateProductCartArgs {
  product_id: String!
  cart_id: String
  quantity: Int!
}

input RemoveProductFromCartArgs {
  product_id: String!
  cart_id: String!
}

input AddProductArgs {
  product_name: String!
  description: String!
  stock: Float!
  categories: [Int!]!
  is_available: Boolean!
  unit_price: Float!
}

input UpdateProductArgs {
  product_name: String
  description: String
  stock: Int
  is_available: Boolean
  unit_price: Int
}

input UpdateProductCategoriesArgs {
  id: ID!
  op: String!
  categories: [Int!]!
}

union FavoriteResponse = AddFavoriteRes | RemoveFavoriteRes

type AddFavoriteRes implements IAddRecordRes {
  id: ID!
  created_at: DateTime!
}

type RemoveFavoriteRes implements IRemoveRecordRes {
  deleted_at: DateTime!
}

input CheckUncheckFavoriteArgs {
  product_id: ID!
}

input AddCategoryReq {
  category_name: String!
}

input DeleteCategoryReq {
  id: Int!
}