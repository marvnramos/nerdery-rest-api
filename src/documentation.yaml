openapi: "3.1.0"
info:
  title: "NodeJs Rest API architecture"
  description: "This is the documentation for the REST API architecture"
  version: "1.0.0"
  contact:
    email: "marvinramos@ravn.co"
    name: "Marvin Ramos"
tags:
  - name: auth
  - name: users
  - name: favorites
  - name: carts
  - name: products
  - name: orders
  - name: payments
servers:
  - url: "https://localhost:3000/api/v1"
paths:
  /auth/signin:
    post:
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInRequest"
        required: true
      responses:
        '200':
          description: Successfully login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignInResponse"
        400:
          description: MisSign some fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginBadRequestResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
  /auth/signout:
    post:
      tags:
        - "auth"
      security:
        - bearerAuth: [ ]
      responses:
        204:
          description: You have been signed out
        401:
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
  /users/signup:
    post:
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpRequest"
      responses:
        201:
          description: New user was recorded.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignUpResponse"
        400:
          description: MisSign some fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignUpBadRequestResponse"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
  /users/forgot-password:
    put:
      summary: Request a password reset email
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
      responses:
        202:
          description: Password reset email sent if the email exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForgotPasswordResponse"
        400:
          description: Invalid email or bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForgotPasswordBadRequestResponse"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /users/reset-password:
    put:
      summary: Reset password using a token
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
      responses:
        204:
          description: Password successfully reset.
        400:
          description: Invalid token or bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResetPasswordBadRequestResponse"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /favorites:
    post:
      summary: Add product to my favorites
      tags:
        - favorites
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FavoritesRequest"
      responses:
        201:
          description: Product added to user's favorites.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavoritesResponse"
        400:
          description: Invalid id or bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavoritesBadRequestResponse"
        401:
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
    get:
      summary: Get all user's favorites products
      tags:
        - favorites
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Show all user's favorites products
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFavoritesResponse"
        401:
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
  /favorites/{favorite_id}:
    delete:
      summary: Remove a product from favorites
      tags:
        - favorites
      security:
        - bearerAuth: [ ]
      parameters:
        - name: favorite_id
          in: path
          description: The unique identifier of the favorite item to be removed.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Successfully removed the favorite product.
        400:
          description: Invalid id or bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteFavoritesBadRequestResponse"
        401:
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /carts:
    post:
      summary: Add a new cart record
      tags:
        - carts
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartRequest"
      responses:
        201:
          description: The cart record was successfully added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartResponse"
        400:
          description: Invalid ID or bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartBadRequestResponse"
        401:
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
    get:
      summary: Show all user's carts
      tags:
        - carts
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: Show your current carts list.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllCartResponse"

        401:
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /carts/{cart_id}:
    patch:
      summary: Allows user to increment or decrement the quantity of a product in the cart
      tags:
        - carts
      security:
        - bearerAuth: [ ]
      parameters:
        - name: cart_id
          in: path
          description: The unique identifier of the cart item to be edited.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchCartRequest"
      responses:
        204:
          description: Cart item updated successfully
        400:
          description: Invalid ID or bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatchBadRequestResponse"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

    delete:
      summary: Removes a product from the cart
      tags:
        - carts
      security:
        - bearerAuth: [ ]
      parameters:
        - name: cart_id
          in: path
          description: The unique identifier of the cart item to be deleted.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Cart item deleted successfully
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /products:
    post:
      summary: Add a new product record
      tags:
        - products
      description: Allows `manager` roles to create a new product record.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductRequest"
      responses:
        201:
          description: Product created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        400:
          description: Invalid ID or bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductBadRequest"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        403:
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

    get:
      summary: Show all products by pagination
      tags:
        - products
      description: Retrieves a paginated list of products, accessible to both `manager` and authenticated users with role `customer`.
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of records per page
          schema:
            type: integer
        - name: category_id
          in: query
          description: Filter products by category
          schema:
            type: integer
      responses:
        200:
          description: Paginated list of products.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductListResponse"
        400:
          description: Pagination Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginationProductBadRequest"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /products/{product_id}:
    get:
      summary: Show product detail
      tags:
        - products
      description: Retrieve detailed information about a specific product.
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Product details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetProductResponse"
        400:
          description: Pagination Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetProductBadRequest"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

    put:
      summary: Edit a product record
      tags:
        - products
      description: Allows `manager` roles to update an existing product's information.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductUpdateRequest"
      responses:
        204:
          description: Product updated successfully.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateProductBadRequest"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        403:
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

    delete:
      summary: Remove a product record
      tags:
        - products
      description: Allows `manager` roles to delete a product record.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Product deleted successfully.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateProductBadRequest"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        403:
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /products/{product_id}/categories:
    patch:
      summary: Edit categories product
      tags:
        - products
      description: Allows `manager` roles to update specific fields like visibility or image URL.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductPartialUpdateRequest"
            examples:
              addCategory:
                summary: Add a category to a product
                description: Example for adding one or more categories to a product.
                value:
                  - op: "add"
                    path: "/categories"
                    value: [ 7, 8 ]
              removeCategory:
                summary: Remove a category from a product
                description: Example for removing one or more categories by their IDs.
                value:
                  - op: "remove"
                    path: "/categories"
                    value: [ 7 ]
      responses:
        204:
          description: Categories updated successfully.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateProductBadRequest"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        403:
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /products/{product_id}/images:
    patch:
      summary: Modify product images
      tags:
        - products
      description: Allows `manager` roles to add or remove images for a product using JSON Patch.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductImagesUpdateRequest"
            examples:
              addImages:
                summary: Add new images
                description: Example for adding multiple images to a product.
                value:
                  - op: "add"
                    path: "/images"
                    value:
                      - "https://example.com/image1.jpg"
                      - "https://example.com/image2.jpg"
              removeImages:
                summary: Remove images
                description: Example for removing specific images by ID.
                value:
                  - op: "remove"
                    path: "/images"
                    value:
                      - "f9b34e77-e89b-12d3-a456-426614174001"
                      - "f9b34e77-e89b-12d3-a456-426614174002"
      responses:
        204:
          description: Product images updated successfully.
        400:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateProductBadRequest"
        401:
          description: Unauthorized access.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        403:
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionResponse"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /orders:
    post:
      summary: Add a new order record
      tags:
        - orders
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderRequest"
      responses:
        201:
          description: Order created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponse"
        400:
          description: Invalid ID or bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderBadRequest"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

    get:
      summary: Show all orders by pagination
      tags:
        - orders
      security:
        - bearerAuth: [ ]
      description: Retrieves a paginated list of all orders to users with `manager` role and, retrieves orders for a specific user with the role of `customer`
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of records per page
          schema:
            type: integer
        - name: status_payment_id
          in: query
          description: Filtering by status payment id
          schema:
            type: integer
      responses:
        200:
          description: Paginated list of orders.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderListResponse"
        400:
          description: Invalid query param or bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOrderBadRequest"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        403:
          description: Permission denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /orders/{order_id}:
    get:
      summary: Show order details
      tags:
        - orders
      security:
        - bearerAuth: [ ]
      description: Retrieve detailed information about a specific order.
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Order details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOrderResponse"
        400:
          description: Invalid query param or bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOneOrderBadRequest"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /payments:
    post:
      summary: Creates a PaymentIntent for a new payment
      tags:
        - payments
      description: This endpoint creates a PaymentIntent in Stripe to initiate a payment process.
      operationId: createPaymentIntent
      requestBody:
        description: Information needed to create a PaymentIntent.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentRequest"
      responses:
        201:
          description: PaymentIntent successfully created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentResponse"
        400:
          description: Bad request, misSign or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentBadRequest"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

    put:
      summary: Updates the PaymentIntent with card details
      tags:
        - payments
      description: This endpoint updates an existing PaymentIntent with the card details provided by the user.
      operationId: updatePaymentIntent
      requestBody:
        description: Information needed to update the PaymentIntent.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePaymentRequest"
      responses:
        204:
          description: PaymentIntent successfully updated.
        400:
          description: Bad request, missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdatePaymentBadRequest"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /payments/intent-confirmation:
    post:
      summary: Confirms the PaymentIntent to process the payment
      tags:
        - payments
      description: This endpoint confirms the PaymentIntent to proceed with the charge in Stripe.
      operationId: confirmPaymentIntent
      requestBody:
        description: Additional information to confirm the payment.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IntentRequest"
      responses:
        204:
          description: The payment has been successfully processed.
        400:
          description: Bad request, misSign or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentBadRequest"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /payments/webhook:
    post:
      summary: Endpoint to receive Webhook Stripe events
      tags:
        - payments
      description: This endpoint receives notifications from Stripe about the payment status.
      operationId: handleStripeWebhook
      requestBody:
        description: Events sent by Stripe regarding the payment status.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookRequest"
      responses:
        200:
          description: Webhook received and processed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        400:
          description: Bad request, misSign or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookBadRequest"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    IntentRequest:
      type: object
      properties:
        payment_intent_id:
          type: string
          description: The ID of the PaymentIntent that was created earlier.
          example: "pi_1F7A2z2eZvKYlo2CxVryFjXY"
        order_id:
          type: string
          description: Unique identifier for the order.
          format: uuid
          example: "5ca2db61-8ba8-4a4c-bac3-daa957020a02"
      required:
        - order_id
        - payment_intent_id

    UpdatePaymentRequest:
      type: object
      properties:
        payment_method:
          type: string
          description: Payment method ID associated with the PaymentIntent.
          example: pm_1F7A2z2eZvKYlo2C9ijgX5qF
      required:
        - payment_method

    PaymentRequest:
      type: object
      properties:
        order_id:
          type: string
          description: Unique identifier for the order.
          example: "5ca2db61-8ba8-4a4c-bac3-daa957020a02"
      required:
        - order_id


    PaymentResponse:
      type: object
      properties:
        client_secret:
          type: string
          description: Used to complete the payment on the frontend.
          example: "pi_1F7A2z2eZvKYlo2CxVryFjXY_secret_pkljA3jvnL03n6vb10vhAakdE"

    UpdatePaymentBadRequest:
      type: object
      properties:
        payment_method:
          type: string
          example: This field is required

    WebhookBadRequest:
      type: object
      properties:
        id:
          type: string
          example: This field is required
    WebhookRequest:
      type: object
      properties:
        id:
          type: string
          description: The event ID sent by Stripe.
          example: "evt_1F7A2z2eZvKYlo2Cj2X3rTnq"
        type:
          type: string
          description: The event type
          example: payment_intent.succeeded
        data:
          type: object
          description: Additional information about the payment.
          properties:
            status:
              type: string
              example: "succeeded"
            amount_received:
              type: integer
              example: 5000
            metadata:
              type: object
              properties:
                order_id:
                  type: string
                  example: 5ca2db61-8ba8-4a4c-bac3-daa957020a02
              required:
                - order_id
      required:
        - status
        - amount_received
        - metadata

    WebhookResponse:
      type: object
      properties:
        event_id:
          type: string
          description: The event ID sent by Stripe.
          example: evt_1F7A2z2eZvKYlo2Cj2X3rTnq
        event_type:
          type: string
          description: The event type (e.g., 'payment_intent.succeeded').
          example: payment_intent.succeeded
        payment_status:
          type: string
          description: The current payment status.
          example: succeeded
        order_id:
          type: string
          format: uuid
          description: The order ID associated with the payment.
          example: 5ca2db61-8ba8-4a4c-bac3-daa957020a02
    OrderRequest:
      type: object
      properties:
        address:
          type: string
          example: Av. 1243
        nearby_landmark:
          type: string
          example: near to the hospital
        product_id:
          type: string
          format: uuid
          example: d1a4c389-e835-4df6-8331-0375f6c82ccd
        quantity:
          type: integer
          example: 4
      required:
        - address
        - nearby_landmark
        - product_id
        - quantity

    OrderResponse:
      type: object
      properties:
        id:
          type: uuid
          example: 6264efef-d9ca-475b-91f5-5770d3b02fac
        created_at:
          type: string
          example: 2024-12-05T14:00:00Z
    OrderListResponse:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        totalPages:
          type: integer
          example: 5
        totalItems:
          type: integer
          example: 50
        orders:
          type: array
          items:
            $ref: "#/components/schemas/Order"

    GetOrderResponse:
      type: object
      properties:
        id:
          type: string
          example: 7b5dca1a-e65c-4f7e-88c0-dcfcad23ab67
        address:
          type: string
          example: 1234 Calle Falsa, San Salvador, 56789
        nearby_landmark:
          type: string
          example: Cerca de la Plaza ABC
        products:
          type: array
          items:
            $ref: "#/components/schemas/OrderProduct"
        total_amount:
          type: decimal
          example: 1005.45
        status_payment:
          type: string
          enum:
            - pending
            - paid
            - failed
          example: paid
        created_at:
          type: string
          example: 2024-10-05T15:30:00Z

    Order:
      type: object
      properties:
        order_id:
          type: string
          format: uuid
          example: 7b5dca1a-e65c-4f7e-88c0-dcfcad23ab67
        customer:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: 4a4bcf6e-6c85-4535-a605-66fc5ccecc8a
            name:
              type: string
              example: Juan Pérez
            email:
              type: string
              example: juan.perez@example.com
        address:
          type: string
          example: 1234 Calle Falsa, San Salvador, 56789
        nearby_landmark:
          type: string
          example: Cerca de la Plaza ABC
        products:
          type: array
          items:
            $ref: "#/components/schemas/OrderProduct"
        total_amount:
          type: decimal
          example: 1005.45
        status_payment:
          type: string
          enum:
            - pending
            - paid
            - failed
          example: paid
        created_at:
          type: string
          example: 2024-10-05T15:30:00Z

    OrderProduct:
      type: object
      properties:
        product_id:
          type: string
          format: uuid
          example: 2a43754a-8f7e-49d2-a748-f93e3edc24b9
        name:
          type: string
          example: Laptop HP
        quantity:
          type: integer
          example: 2
        unit_price:
          type: decimal
          example: 480.99
        total_price:
          type: decimal
          example: 961.98
        uri:
          type: string
          example: /products/2a43754a-8f7e-49d2-a748-f93e3edc24b9

    PaymentBadRequest:
      type: object
      properties:
        amount:
          type: string
          example: This field is required

    GetOneOrderBadRequest:
      type: object
      properties:
        order_id:
          type: string
          example: This field is required

    GetOrderBadRequest:
      type: object
      properties:
        page:
          type: string
          example: This field must be positive integer

    OrderBadRequest:
      type: object
      properties:
        quantity:
          type: string
          example: This field must be positive integer

    ProductImagesUpdateRequest:
      type: array
      items:
        type: object
        required:
          - op
          - path
        properties:
          op:
            type: string
            enum:
              - add
              - remove
            description: Operation to perform (add or remove).
          path:
            type: string
            enum:
              - "/images"
            description: Path to the images property.
          value:
            type: array
            description: Data to be added or removed.
            items:
              oneOf:
                - type: string
                  format: uri
                  description: Image URL (for `add`).
                - type: string
                  format: uuid
                  description: Image ID (for `remove`).
    ProductUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Name of the product.
          example: "Wireless Mouse"
        price:
          type: number
          format: float
          description: Price of the product.
          example: 29.99
        description:
          type: string
          description: Detailed description of the product.
          example: "A high-precision wireless mouse with ergonomic design."
        stock:
          type: integer
          description: Quantity of the product in stock.
          example: 150
        is_available:
          type: boolean
          description: Indicates if the product is available for purchase.
          example: true

    ProductPartialUpdateRequest:
      type: array
      items:
        type: object
        required:
          - op
          - path
        properties:
          op:
            type: string
            enum:
              - add
              - remove
            description: Operation to perform (add, replace, or remove).
          path:
            type: string
            description: JSON Pointer path of the property to modify.
            example: "/categories"
          value:
            description: The value to add or replace at the specified path (not required for `remove`).
            nullable: true
        additionalProperties: false
      example:
        - op: "add"
          path: "/categories"
          value: [ 7 ]

    UpdateProductBadRequest:
      type: object
      properties:
        product_id:
          type: string
          example: This field is required!
    SignInRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: example@mail.com
        password:
          type: string
          format: password
          example: Myp@ssword123
      required:
        - email
        - password
    SignInResponse:
      type: object
      properties:
        bearer_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    LoginBadRequestResponse:
      type: object
      properties:
        email:
          type: string
          example: This field is required!
    SignUpRequest:
      type: object
      properties:
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: johndoe@example.com
        address:
          type: string
          example: 123 Av. F
        password:
          type: string
          format: password
          example: P@ssw0rd!
      required:
        - first_name
        - last_name
        - email
        - password
    ForgotPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: The email address associated with the account.
      required:
        - email

    ForgotPasswordResponse:
      type: object
      properties:
        accepted:
          type: boolean
          example: true

    ForgotPasswordBadRequestResponse:
      type: object
      properties:
        email:
          type: string
          example: This field is required!
    ResetPasswordRequest:
      type: object
      properties:
        token:
          type: string
          format: uuid
          example: 6264efef-d9ca-475b-91f5-5770d3b02fac
          description: The reset token sent via email.
        new_password:
          type: string
          example: P@ssw0rd!
          format: password
          description: The new password for the account.
      required:
        - token
        - new_password
    ResetPasswordBadRequestResponse:
      type: object
      properties:
        new_password:
          type: string
          example: This field is required!

    SignUpResponse:
      type: object
      properties:
        created_at:
          example: "2023-09-01T14:30:00Z"
    SignUpBadRequestResponse:
      type: object
      properties:
        first_name:
          type: string
          example: This field is required!

    FavoritesRequest:
      type: object
      properties:
        product_id:
          type: uuid
          example: 6264efef-d9ca-475b-91f5-5770d3b02fac
          description: User's favorite product id.
      required:
        - product_id
    FavoritesResponse:
      type: object
      properties:
        id:
          type: uuid
          example: 6264efef-d9ca-475b-91f5-5770d3b02fac
        created_at:
          type: string
          example: 2024-12-05T14:00:00Z
    GetFavoritesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/GetFavoritesData"

    GetFavoritesData:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 97c978f0-3975-41a7-b9af-7fa0abfc5081
        product_id:
          type: string
          format: uuid
          example: a09c037a-cead-42c8-8ac0-dbdc158b497f
        product_name:
          type: string
          example: Samsung Galaxy A55
        unit_price:
          type: decimal
          example: 350.00
        currency:
          type: string
          example: USD
        image_url:
          type: string
          format: uri
          example: https://storage-domain.com/image.png
        uri:
          type: string
          format: uri
          example: /products/a09c037a-cead-42c8-8ac0-dbdc158b497f

    FavoritesBadRequestResponse:
      type: object
      properties:
        product_id:
          type: string
          example: This field is required!
    DeleteFavoritesBadRequestResponse:
      type: object
      properties:
        favorite_id:
          type: string
          example: This field is required!

    CartRequest:
      type: object
      properties:
        product_id:
          type: string
          format: uuid
          example: 6264efef-d9ca-475b-91f5-5770d3b02fac
          description: List of product IDs to be added to the cart.
        quantity:
          type: integer
          example: 2
      required:
        - product_id

    PatchCartRequest:
      type: object
      properties:
        op:
          type: string
          example: replace
        path:
          type: string
          example: /carts
        value:
          type: integer
          example: 7


    CartResponse:
      type: object
      description: Response returned when the user is unauthorized to access the requested resource.
      properties:
        id:
          type: string
          format: uuid
          example: 97c978f0-3975-41a7-b9af-7fa0abfc5081
        created_at:
          type: string
          example: 2024-12-05T14:10:00Z

    CartBadRequestResponse:
      type: object
      properties:
        product_id:
          type: string
          example: This field is required!

    PatchBadRequestResponse:
      type: object
      properties:
        value:
          type: string
          example: This field is required!

    GetAllCartResponse:
      type: object
      description: Response returned when all carts belonging to the user are retrieved successfully.
      properties:
        data:
          type: array
          description: A list containing all the user's cart items.
          items:
            $ref: "#/components/schemas/AllCartItem"

    CartItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 97c978f0-3975-41a7-b9af-7fa0abfc5081
        created_at:
          type: string
          example: 2024-12-05T14:10:00Z

    AllCartItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 97c978f0-3975-41a7-b9af-7fa0abfc5081
        product_id:
          type: string
          format: uuid
          example: bb790a0e-a8d1-4c6e-8301-c2bbc8168431
        product_name:
          type: string
          format: uuid
          example: AJAZZ Keyboard
        unit_price:
          type: decimal
          example: 20.66
        currency:
          type: string
          example: USD
        image_url:
          type: string
          example: http://storage-domain.com/bb790a0e-a8d1-4c6e-8301-c2bbc8168431.png
        uri:
          type: string
          format: uri
          example: /products/bb790a0e-a8d1-4c6e-8301-c2bbc8168431

    ProductRequest:
      type: object
      properties:
        product_name:
          type: string
          example: Control xbox series x s one
          description: product's name
        description:
          type: string
          example: Connect to Xbox consoles with Xbox wireless technology.
            Connect wirelessly to Windows 10/11 PCs, tablets, iOS and Android via Bluetooth.
        stock:
          type: integer
          example: 39
          description: This field represents the existence of the product in the inventory.
        categories:
          type: array
          description: This array contains a list of categories ids
          items:
            type: integer
            example: 2
        is_available:
          type: boolean
          example: true
          description: This field represent if product could be visible for customers
        image_url:
          type: string
          example: http://storage.com/bb790a0e-a8d1-4c6e-8301-c2bbc8168431.png
          description: This field represent product image
        unit_price:
          type: decimal
          example: 59.99
      required:
        - product_name
        - description
        - stock
        - image_url
        - unit_price
    ProductBadRequest:
      type: object
      properties:
        stock:
          type: string
          example: This field is required!

    ProductResponse:
      type: object
      description: Response returned when product record was added successfully.
      properties:
        id:
          type: string
          format: uuid
          example: 671f720b-0186-4e65-b802-b4c6c6e1a41b
        created_at:
          type: string
          example: 024-12-05T14:10:00Z
    PaginationProductBadRequest:
      type: object
      properties:
        limit:
          type: string
          example: This field is required!

    GetProductResponse:
      type: object
      description: Response returned when a product record is retrieved successfully.
      properties:
        id:
          type: string
          format: uuid
          example: 2a43754a-8f7e-49d2-a748-f93e3edc24b9
        name:
          type: string
          example: Laptop HP
        description:
          type: string
          example: Overcome the obstacles of hybrid work with the HP EliteBook 845. The latest AMD processor, up to 64 GB of DDR5 memory and features that enhance online meetings let you listen, be heard and perform at your best.
        stock:
          type: integer
          example: 23
        is_available:
          type: boolean
          example: true
        unit_price:
          type: decimal
          example: 480.99
        currency:
          type: string
          example: USD
        image_url:
          type: string
          example: http://storage-domain.com/2a43754a-8f7e-49d2-a748-f93e3edc24b9.png

    GetProductBadRequest:
      type: object
      properties:
        product_id:
          type: string
          example: This field is required!

    ProductListResponse:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        totalPages:
          type: integer
          example: 5
        totalItems:
          type: integer
          example: 50
        products:
          type: array
          items:
            $ref: "#/components/schemas/Products"

    Products:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 2a43754a-8f7e-49d2-a748-f93e3edc24b9
        name:
          type: string
          example: Laptop HP
        categories:
          type: array
          items:
            type: integer
            example: 3
        unit_price:
          type: decimal
          example: 480.99
        currency:
          type: string
          example: USD
        image_url:
          type: string
          example: http://storage-domain.com/2a43754a-8f7e-49d2-a748-f93e3edc24b9.png
        uri:
          type: string
          example: /products/2a43754a-8f7e-49d2-a748-f93e3edc24b9


    UnauthorizedResponse:
      type: object
      description: Response returned when the user is unauthorized to access the requested resource.
      properties:
        error:
          type: string
          description: Specific error details.
          example: Invalid token or token expired.

    PermissionResponse:
      type: object
      description: Response returned when the user has not permissions to execute the requested action.
      properties:
        error:
          type: string
          description: Specific error details.
          example: Invalid user permissions.

    ServerErrorResponse:
      type: object
      description: Response returned when the server run into an error.
      properties:
        error:
          type: string
          description: Specific error details.
          example: Can't implement that action.
