scalar Timestamp

enum Operation {
    ADD
    REMOVE
    UPDATE
}

enum Status {
    SUCCESS
    FAILURE
}

interface IResponse {
    id: ID!
}

interface IUpdateResponse {
    updated_at: Timestamp!
}

interface ICreatedResponse {

    created_at: Timestamp!
}

interface  IDeletedResponse {
    deleted_at: Timestamp!
}

type ErrorRes {
    error: Error!
}

type Error {
    error: String!
}

"""
Client and Manager Role Responses
"""
type SignInSuccessRes {
    bearer_token: String!
}

type SignOutSuccessRes implements IResponse {
    id: ID!
}

type ForgotPasswordSuccessRes implements IResponse {
    id: ID!
}

type ResetPasswordSuccessRes implements IUpdateResponse {
    updated_at: Timestamp!
}


"""
Client Role Responses
"""
type SignUpSuccessRes implements ICreatedResponse  {
    created_at: Timestamp!
}

type AddFavoriteSuccessRes implements ICreatedResponse {
    created_at: Timestamp!
}

type GetAllUserFavoritesSuccessRes {
    data: [GetUserFavoritesData!]!
}

type DeleteFavoriteSuccessRes implements IDeletedResponse {
    deleted_at: Timestamp!
}

type AddCartSuccessRes implements ICreatedResponse  {
    created_at: Timestamp!
}

type GetUserCartsSuccessRes {
    data: [CartData!]!
}

type UpdateCartSuccessRes implements IUpdateResponse {
    updated_at: Timestamp!
}

type RemoveCartSuccessRes implements IDeletedResponse {
    deleted_at: Timestamp!
}

type AddOrderSuccessRes implements ICreatedResponse  {
    created_at: Timestamp!
}

type GetOrdersSuccessRes {
    data: OrdersData!
}

type GetOrderSuccessRes {
    id: ID!
    address: String!
    nearby_landmark: String!
    products: [ProductsData!]!
    total_amount: Float!
    status_payment: String!
    created_at: Timestamp!
}

type PaymentIntentSuccessRes {
    client_secret: String!
}


type UpdatePaymentIntentSuccessRes implements IUpdateResponse{
    updated_at: Timestamp!
}

type ConfirmPaymentIntentSuccessRes {
    confirmed: Boolean!
}

type PaymentWebhookSuccessRes {
    event_id: String!
    event_type: String!
    payment_status: Status!
    order_id: String!
}

"""
Responses to manager role
"""
type AddProductSuccessRes implements ICreatedResponse {
    created_at: Timestamp!
}

type UpdateProductSuccessRes implements IUpdateResponse{
    updated_at: Timestamp!
}

type GetProductsSuccessRes {
    page: Int!
    limit: Int!
    total_pages: Int!
    total_items: Int!
    products: [Product!]!
}

type GetProductSuccessRes {
    id: ID!
    name: String!
    description: String!
    stock: Int!
    is_available: Boolean!
    unit_price: Float!
    currency: String!
    image_url: String!
}

type RemoveProductSuccessRes implements IDeletedResponse {
    deleted_at: Timestamp!
}

type UpdateProductCategoriesSuccessRes implements IUpdateResponse{
    updated_at: Timestamp!
}

type UpdateProductImagesSuccessRes implements IUpdateResponse{
    updated_at: Timestamp!
}

"""
Manager Responses Data Types
"""
type ProductsData {
    product_id: String!
    name: String!
    quantity: Int!
    unit_price: Float!
    total_price: Float!
    uri: String!
}

type GetProductsData {
    page: Int!
    limit: Int!
    total_pages: Int!
    total_items: Int!
    products: [Product!]!
}

type Product {
    id: ID!
    name: String!
    categories: [ID!]!
    unit_price: Float!
    currency: String!
    image_url: String!
    uri: String!
}

"""
Client Role Data Types
"""
type UserOrderData {
    id: ID!
    created_at: Timestamp!
    status_payment: String!
    total_amount: Float!
    currency: String!
    uri: String!
}

type OrdersData {
    page: Int!
    limit: Int!
    total_pages: Int!
    total_items: Int!
    orders: [OrderData!]!
}

type OrderData {
    order_id: ID!
    customer: CustomerData!
    address: String!
    nearby_landmark: String!
    products: [ProductsData!]!
    total_amount: Float!
    status_payment: String!
    created_at: Timestamp!
}

type CustomerData {
    id: ID!
    name: String!
    email: String!
}

type CartData {
    id: ID!
    product_id: ID!
    product_name: String!
    unit_price: Float!
    currency: String!
    image_url: String!
    uri: String!
}

type GetUserFavoritesData {
    id: ID!
    product_id: ID!
    product_name: String!
    unit_price: Float!
    currency: String!
    image_url: String!
    uri: String!
}

"""
Responses
"""
union SignInRes = SignInSuccessRes | ErrorRes
union SignUpRes = SignUpSuccessRes | ErrorRes
union SignOutRes = SignOutSuccessRes | ErrorRes
union ForgotPasswordRes = ForgotPasswordSuccessRes | ErrorRes
union ResetPasswordRes = ResetPasswordSuccessRes | ErrorRes
union AddFavoriteRes = AddFavoriteSuccessRes | ErrorRes
union GetAllUserFavoritesRes = GetAllUserFavoritesSuccessRes | ErrorRes
union DeleteFavoriteRes = DeleteFavoriteSuccessRes | ErrorRes
union AddCartRes = AddCartSuccessRes | ErrorRes
union GetUserCartsRes = GetUserCartsSuccessRes | ErrorRes
union UpdateCartRes = UpdateCartSuccessRes | ErrorRes
union RemoveCartRes = RemoveCartSuccessRes | ErrorRes
union AddProductRes = AddProductSuccessRes | ErrorRes
union UpdateProductRes = UpdateProductSuccessRes | ErrorRes
union RemoveProductRes = RemoveProductSuccessRes | ErrorRes
union GetProductsRes = GetProductsSuccessRes | ErrorRes
union GetProductRes = GetProductSuccessRes | ErrorRes
union UpdateProductCategoriesRes = UpdateProductCategoriesSuccessRes | ErrorRes
union UpdateProductImagesRes = UpdateProductImagesSuccessRes | ErrorRes
union AddOrderRes = AddOrderSuccessRes | ErrorRes
union GetOrdersRes = GetOrdersSuccessRes | ErrorRes
union GetOrderRes = GetOrderSuccessRes | ErrorRes
union CreatePaymentIntentRes = PaymentIntentSuccessRes | ErrorRes
union UpdatePaymentIntentRes = UpdatePaymentIntentSuccessRes | ErrorRes
union ConfirmPaymentIntentRes = ConfirmPaymentIntentSuccessRes | ErrorRes
union PaymentWebhookRes = PaymentWebhookSuccessRes | ErrorRes

"""
Manager Requests
"""

input AddProductReq {
    product_name: String!
    description: String!
    stock: Int!
    categories: [ID!]!
    is_available: Boolean!
    image_url: String!
    unit_price: Float!
}

input UpdateProductReq {
    name: String!
    price: Float!
    description: String!
    stock: Int!
    is_available: Boolean!
}

"""
Manager and Client Requests
"""

input GetProductsReq {
    first: Int!
    after: Int!
    category_id: ID!
}

input UpdateProductCategoriesReq {
    op: Operation!
    path: String!
    value: [ID!]!
}

input UpdateProductImagesReq {
    op: Operation!
    path: String!
    value: [String!]!
}

input SignInReq {
    email: String!
    password: String!
}

input ForgotPasswordReq {
    email: String!
}

input ResetPasswordReq {
    token: String!
    new_password: String!
}

"""
Client Requests
"""

input SignUpReq {
    first_name: String!
    last_name: String!
    email: String!
    address: String!
    password: String!
}

input AddFavoriteReq {
    product_id: ID!
}

input DeleteFavoriteReq {
    id: ID!
}

input AddCartReq {
    product_id: ID!
    quantity: Int!
}

input UpdateCartReq {
    op: Operation!
    path: String!
    value: Int!
}



input GetOrdersReq {
    first: Int!
    after: Int!
    status_payment_id: ID!
}

input AddOrderReq {
    address: String!
    nearby_landmark: String!
    product_id: ID!
    quantity: Int!
}

input PaymentWebhookInputData {
    status: Status!
    amount_received: Int!
    metadata: MetaData
}

input MetaData {
    order_id: ID!
}

input CreatePaymentIntentReq {
    amount: Int!
    currency: String!
    metadata: MetaData!
}

input UpdatePaymentIntentReq {
    payment_method: String!
}

input ConfirmPaymentIntentReq {
    payment_intent_id: String!
    amount: Int!
}

input PaymentWebhookEventReq {
    id: ID!
    type: String!
    data: PaymentWebhookInputData!
}

type ClientQuery {
    """
    To need header authentication
    """
    # Favorites
    getAllUserFavorites: GetAllUserFavoritesRes!
    # Carts
    getUserCarts: GetUserCartsRes!
    # Orders
    getOrders(req: GetOrdersReq): GetOrdersRes!
    getOrder(order_id: ID!): GetOrderRes!
}

type ClientAndManagerQuery {
    """
    Don't need header authentication
    """
    # Products
    getProducts(req: GetProductsReq): GetProductsRes!
    getProduct(product_id: ID!): GetProductRes!
}

type ClientMutation {
    """
    To need header authentication
    """
    # User
    signUp(req: SignUpReq!): SignUpRes!

    # Favorites
    addFavorite(req: AddFavoriteReq!): AddFavoriteRes!
    removeFavorite(req: DeleteFavoriteReq!): DeleteFavoriteRes!

    # Carts
    addCart(req: AddCartReq!): AddCartRes!
    updateCart(cart_Id: ID!, req: UpdateCartReq!): UpdateCartRes!
    removeCart(cart_Id: ID!): RemoveCartRes!

    # Orders
    addOrder(req: AddOrderReq): AddOrderRes!

    # Payments
    createPaymentIntent(req: CreatePaymentIntentReq!): CreatePaymentIntentRes!
    updatePaymentIntent(req: UpdatePaymentIntentReq!): UpdatePaymentIntentRes!
    confirmPaymentIntent(req: ConfirmPaymentIntentReq!): ConfirmPaymentIntentRes!
    handlePaymentWebhook(req: PaymentWebhookEventReq!): PaymentWebhookRes!
}

type ClientAndManagerMutation {
    # Auth
    """
    To need header authentication
    """
    signIn(req: SignInReq!): SignInRes!
    forgotPassword(req: ForgotPasswordReq!): ForgotPasswordRes!
    resetPassword(req: ResetPasswordReq!): ResetPasswordRes!

    """
    Don't need header authentication
    """
    signOut: SignOutRes!

}

type ManagerMutation {
    """
    To need header authentication
    """
    # Products
    addProduct(req: AddProductReq!): AddProductRes!
    updateProduct(product_id: ID!, req: UpdateProductReq!): UpdateProductRes!
    removeProduct(product_id: ID!): RemoveProductRes!
    updateProductCategories(
        product_id: ID!
        req: UpdateProductCategoriesReq!
    ): UpdateProductCategoriesRes!
    updateProductImages(
        product_id: ID!
        req: UpdateProductImagesReq!
    ): UpdateProductImagesRes!
}
