scalar Timestamp

interface IStandardResponse {
    status: Status!
    message: String!
}

enum Operation {
    ADD
    REMOVE
    UPDATE
}

enum Status {
    SUCCESS
    FAILURE
}

type AuthToken {
    bearer_token: String!
}

type SignInSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: AuthToken!
}

type SignUpSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: SignUpData!
}

type SignOutSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: SignOutData!
}

type ForgotPasswordSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: ForgotPasswordData!
}

type ResetPasswordSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: ResetPasswordData!
}

type AddFavoriteSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: CreateData!
}

type GetAllUserFavoritesSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: [GetUserFavoritesData!]!
}

type DeleteFavoriteSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: DeleteFavoriteData!
}

type AddCartSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: CreateData!
}

type GetUserCartsSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: [CartData!]!
}

type UpdateCartSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: UpdateData!
}

type RemoveCartSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: RemoveCartData!
}

type AddProductSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: CreateData!
}

type UpdateProductSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: UpdateData!
}

type GetProductsSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: GetProductsData!
}

type GetProductSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: ProductData!
}

# Error Response Types
type InternalServerErrorRes implements IStandardResponse {
    status: Status!
    message: String!
    data: DataError!
}

type UnauthorizedRes implements IStandardResponse {
    status: Status!
    message: String!
    data: DataError!
}

type PermissionDeniedRes implements IStandardResponse {
    status: Status!
    message: String!
    data: DataError!
}

type SignUpBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type ResetPasswordBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type ForgotPasswordBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type AddFavoriteBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type DeleteFavoriteBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type AddCartBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type UpdateCartBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type AddProductBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type UpdateProductBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type UpdateProductCategoriesBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type UpdateProductImagesBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type RemoveProductSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: RemoveData!
}

type RemoveProductBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type GetProductBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type GetOrderBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type AddOrderBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type PaymentIntentBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type UpdatePaymentIntentBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type ConfirmPaymentIntentBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type PaymentWebhookBadRequestRes implements IStandardResponse {
    status: Status!
    message: String!
    data: StandardBadRequestData!
}

type UpdateProductCategoriesSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: UpdateData!
}

type UpdateProductImagesSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: UpdateData
}

type AddOrderSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: CreateData!
}

type GetOrdersSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: OrdersData!
}

type GetUserOrdersSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: UserOrderData!
}

type GetOrderSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: GetOrderData!
}

type PaymentIntentSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: PaymentIntentData!
}

type PaymentIntentData {
    client_secret: String!
}

type UpdatePaymentIntentSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: PaymentIntentData!
}

type ConfirmPaymentIntentSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: ConfirmPaymentIntentData!
}

type PaymentWebhookSuccessRes implements IStandardResponse {
    status: Status!
    message: String!
    data: PaymentWebhookData!
}

type PaymentWebhookData {
    event_id: String!
    event_type: String!
    payment_status: Status!
    order_id: String!
}

type ConfirmPaymentIntentData {
    confirmed: Boolean!
}

type GetOrderData {
    id: ID!
    address: String!
    nearby_landmark: String!
    products: [ProductsData!]!
    total_amount: Float!
    status_payment: String!
    created_at: Timestamp!
}

type UserOrderData {
    id: ID!
    created_at: Timestamp!
    status_payment: String!
    total_amount: Float!
    currency: String!
    uri: String!
}

type OrdersData {
    page: Int!
    limit: Int!
    total_pages: Int!
    total_items: Int!
    orders: [OrderData!]!
}

type OrderData {
    order_id: ID!
    customer: CustomerData!
    address: String!
    nearby_landmark: String!
    products: ProductsData!
    total_amount: Float!
    status_payment: String!
    created_at: Timestamp!
}

type ProductsData {
    product_id: String!
    name: String!
    quantity: Int!
    unit_price: Float!
    total_price: Float!
    uri: String!
}

type CustomerData {
    id: ID!
    name: String!
    email: String!
}

type GetProductsData {
    page: Int!
    limit: Int!
    total_pages: Int!
    total_items: Int!
    products: [Product!]!
}

type ProductData {
    id: ID!
    name: String!
    description: String!
    stock: Int!
    is_available: Boolean!
    unit_price: Float!
    currency: String!
    image_url: String!
}

type Product {
    id: ID!
    name: String!
    categories: [ID!]!
    unit_price: Float!
    currency: String!
    image_url: String!
    uri: String!
}

type StandardBadRequestData {
    field: String!
}

type RemoveData {
    id: ID!
}

type SignUpData {
    id: ID!
}

type SignOutData {
    id: ID!
}

type ForgotPasswordData {
    id: ID!
}

type ResetPasswordData {
    id: ID!
}

type CreateData {
    id: ID!
    created_at: Timestamp!
}

type DeleteFavoriteData {
    id: ID!
}

type RemoveCartData {
    id: ID!
}

type CartData {
    id: ID!
    product_id: ID!
    product_name: String!
    unit_price: Float!
    currency: String!
    image_url: String!
    uri: String!
}

type UpdateData {
    id: ID!
    updated_at: Timestamp!
}

type GetUserFavoritesData {
    id: ID!
    product_id: ID!
    product_name: String!
    unit_price: Float!
    currency: String!
    image_url: String!
    uri: String!
}

type DataError {
    error: String!
}

union SignInRes = SignInSuccessRes | InternalServerErrorRes
union SignUpRes = SignUpSuccessRes
    | InternalServerErrorRes
    | SignUpBadRequestRes
union SignOutRes = SignOutSuccessRes | InternalServerErrorRes | UnauthorizedRes
union ForgotPasswordRes = ForgotPasswordSuccessRes | InternalServerErrorRes
union ResetPasswordRes =
    ResetPasswordSuccessRes
    | InternalServerErrorRes
    | ResetPasswordBadRequestRes
union AddFavoriteRes =
    AddFavoriteSuccessRes
    | AddFavoriteBadRequestRes
    | InternalServerErrorRes
    | UnauthorizedRes
union GetAllUserFavoritesRes =
    GetAllUserFavoritesSuccessRes
    | UnauthorizedRes
    | InternalServerErrorRes
union DeleteFavoriteRes =
    DeleteFavoriteSuccessRes
    | DeleteFavoriteBadRequestRes
    | UnauthorizedRes
    | InternalServerErrorRes
union AddCartRes =
    AddCartSuccessRes
    | AddCartBadRequestRes
    | UnauthorizedRes
    | InternalServerErrorRes
union GetUserCartsRes =
    GetUserCartsSuccessRes
    | InternalServerErrorRes
    | UnauthorizedRes
union UpdateCartRes =
    UpdateCartSuccessRes
    | UpdateCartBadRequestRes
    | InternalServerErrorRes
    | UnauthorizedRes
union RemoveCartRes =
    RemoveCartSuccessRes
    | UnauthorizedRes
    | InternalServerErrorRes
union AddProductRes =
    AddProductSuccessRes
    | AddProductBadRequestRes
    | PermissionDeniedRes
    | UnauthorizedRes
    | InternalServerErrorRes
union UpdateProductRes =
    UpdateProductSuccessRes
    | UpdateProductBadRequestRes
    | UnauthorizedRes
    | PermissionDeniedRes
    | InternalServerErrorRes
union RemoveProductRes =
    RemoveProductSuccessRes
    | RemoveProductBadRequestRes
    | UnauthorizedRes
    | PermissionDeniedRes
    | InternalServerErrorRes
union GetProductsRes =
    GetProductsSuccessRes
    | GetProductBadRequestRes
    | InternalServerErrorRes
union GetProductRes =
    GetProductSuccessRes
    | GetProductBadRequestRes
    | InternalServerErrorRes
union UpdateProductCategoriesRes =
    UpdateProductCategoriesSuccessRes
    | UpdateProductCategoriesBadRequestRes
    | UnauthorizedRes
    | PermissionDeniedRes
    | InternalServerErrorRes
union UpdateProductImagesRes =
    UpdateProductImagesSuccessRes
    | UpdateProductImagesBadRequestRes
    | UnauthorizedRes
    | PermissionDeniedRes
    | InternalServerErrorRes
union AddOrderRes =
    AddOrderSuccessRes
    | AddOrderBadRequestRes
    | UnauthorizedRes
    | InternalServerErrorRes
union GetOrdersRes =
    GetOrdersSuccessRes
    | GetOrderBadRequestRes
    | UnauthorizedRes
    | PermissionDeniedRes
    | InternalServerErrorRes
union GetUserOrdersRes =
    GetUserOrdersSuccessRes
    | UnauthorizedRes
    | InternalServerErrorRes
union GetOrderRes =
    GetOrderSuccessRes
    | GetOrderBadRequestRes
    | UnauthorizedRes
    | InternalServerErrorRes
union CreatePaymentIntentRes =
    PaymentIntentSuccessRes
    | PaymentIntentBadRequestRes
    | UnauthorizedRes
    | InternalServerErrorRes
union UpdatePaymentIntentRes =
    UpdatePaymentIntentSuccessRes
    | UpdatePaymentIntentBadRequestRes
    | UnauthorizedRes
    | InternalServerErrorRes
union ConfirmPaymentIntentRes =
    ConfirmPaymentIntentSuccessRes
    | ConfirmPaymentIntentBadRequestRes
    | UnauthorizedRes
    | InternalServerErrorRes
union PaymentWebhookRes =
    PaymentWebhookSuccessRes
    | PaymentWebhookBadRequestRes
    | UnauthorizedRes
    | InternalServerErrorRes

input SignInReq {
    email: String!
    password: String!
}

input SignUpReq {
    first_name: String!
    last_name: String!
    email: String!
    address: String!
    password: String!
}

input ForgotPasswordReq {
    email: String!
}

input ResetPasswordReq {
    token: String!
    new_password: String!
}

input AddFavoriteReq {
    product_id: ID!
}

input DeleteFavoriteReq {
    id: ID!
}

input AddCartReq {
    product_id: ID!
    quantity: Int!
}

input UpdateCartReq {
    op: Operation!
    path: String!
    value: Int!
}

input AddProductReq {
    product_name: String!
    description: String!
    stock: Int!
    categories: [ID!]!
    is_available: Boolean!
    image_url: String!
    unit_price: Float!
}

input UpdateProductReq {
    name: String!
    price: Float!
    description: String!
    stock: Int!
    is_available: Boolean!
}

input GetProductsReq {
    first: Int!
    after: ID!
}

input GetOrdersReq {
    first: Int!
    after: ID!
}

input UpdateProductCategoriesReq {
    op: Operation!
    path: String!
    value: [ID!]!
}

input UpdateProductImagesReq {
    op: Operation!
    path: String!
    value: [String!]!
}

input AddOrderReq {
    address: String!
    nearby_landmark: String!
    product_id: ID!
    quantity: Int!
}

input CreatePaymentIntentReq {
    amount: Int!
    currency: String!
    metadata: MetaData!
}

input UpdatePaymentIntentReq {
    payment_method: String!
}

input ConfirmPaymentIntentReq {
    payment_intent_id: String!
    amount: Int!
}

input PaymentWebhookEventReq {
    id: ID!
    type: String!
    data: PaymentWebhookInputData!
}

input PaymentWebhookInputData {
    status: Status!
    amount_received: Int!
    metadata: MetaData
}

input MetaData {
    order_id: ID!
}
type Query {
    # Favorites
    getAllUserFavorites: GetAllUserFavoritesRes!
    # Carts
    getUserCarts: GetUserCartsRes!
    # Products
    getProducts(req: GetProductsReq): GetProductsRes!
    getProduct(product_id: ID!): GetProductRes!
    # Orders
    getOrders(req: GetOrdersReq): GetOrdersRes!
    getUserOrders: GetUserOrdersRes!
    getOrder(order_id: ID!): GetOrderRes!
}

type Mutation {
    # Auth
    signIn(req: SignInReq!): SignInRes!
    signOut: SignOutRes!

    # User
    signUp(req: SignUpReq!): SignUpRes!
    forgotPassword(req: ForgotPasswordReq!): ForgotPasswordRes!
    resetPassword(req: ResetPasswordReq!): ResetPasswordRes!

    # Favorites
    addFavorite(req: AddFavoriteReq!): AddFavoriteRes!
    removeFavorite(req: DeleteFavoriteReq!): DeleteFavoriteRes!

    # Carts
    addCart(req: AddCartReq!): AddCartRes!
    updateCart(cart_Id: ID!, req: UpdateCartReq!): UpdateCartRes!
    removeCart(cart_Id: ID!): RemoveCartRes!

    # Products
    addProduct(req: AddProductReq!): AddProductRes!
    updateProduct(product_id: ID!, req: UpdateProductReq!): UpdateProductRes!
    removeProduct(product_id: ID!): RemoveProductRes!
    updateProductCategories(
        product_id: ID!
        req: UpdateProductCategoriesReq!
    ): UpdateProductCategoriesRes!
    updateProductImages(
        product_id: ID!
        req: UpdateProductImagesReq!
    ): UpdateProductImagesRes!

    # Orders
    addOrder(req: AddOrderReq): AddOrderRes!

    # Payments
    createPaymentIntent(req: CreatePaymentIntentReq!): CreatePaymentIntentRes!
    updatePaymentIntent(req: UpdatePaymentIntentReq!): UpdatePaymentIntentRes!
    confirmPaymentIntent(req: ConfirmPaymentIntentReq!): ConfirmPaymentIntentRes!
    handlePaymentWebhook(req: PaymentWebhookEventReq!): PaymentWebhookRes!
}


# GraphQL Editor: https://academy.graphqleditor.com/?lesson=graph