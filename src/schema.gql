scalar Timestamp

interface StandardResponse {
    status: String!
    message: String!
}

type SignInSuccessRes implements StandardResponse {
    status: String!
    message: String!
    data: AuthToken
}

type SignUpSuccessRes implements StandardResponse {
    status: String!
    message: String!
    data: SignUpData!
}

type InternalServerErrorRes implements StandardResponse {
    status: String!
    message: String!
    data: DataError!
}

type SignUpBadRequestRes implements StandardResponse {
    status: String!
    message: String!
    data: SignUpBadRequestData!
}

type UnauthorizedRes implements StandardResponse {
    status: String!
    message: String!
    data: DataError!
}

type SignOutSuccessRes implements StandardResponse {
    status: String!
    message: String!
    data: SignOutData!
}

type ForgotPasswordSuccessRes implements StandardResponse {
    status: String!
    message: String!
    data: ForgotPasswordData
}

type ResetPasswordSuccessRes implements StandardResponse {
    status: String!
    message: String!
    data: ResetPasswordData!
}

type ResetPasswordBadRequestRes implements StandardResponse {
    status: String!
    message: String!
    data: ResetPasswordBadRequestData!
}

type ForgotPasswordBadRequestRes implements StandardResponse {
    status: String!
    message: String!
    data: ForgotPasswordData
}

type AddFavoriteSuccessRes implements StandardResponse {
    status: String!
    message: String!
    data: CreateOrUpdateData!
}

type AddFavoriteBadRequestRes implements StandardResponse {
    status: String!
    message: String!
    data: AddFavoriteBadRequest!
}

type GetAllUserFavoritesSuccessRes implements StandardResponse {
    status: String!
    message: String!
    data: [GetUserFavoritesData!]!
}


type DeleteFavoriteSuccessRes implements StandardResponse {
    status: String!
    message: String!
    data: DeleteFavoriteData!
}

type DeleteFavoriteBadRequestRes implements StandardResponse{
    status: String!
    message: String!
    data:  DeleteFavoriteBadRequestData!
}

type AddCartSucceesRes implements  StandardResponse {
    status: String!
    message: String!
    data: CreateOrUpdateData!
}

type AddCartBadRequestRes implements  StandardResponse {
    status: String!
    message: String!
    data: AddCartData!
}

type GetUserCartsSucceesRes implements StandardResponse{
    status: String!
    message: String!
    data: [CartData!]!
}

type UpdateCartSuccessRes implements StandardResponse {
    status: String!
    message: String!
    data: CreateOrUpdateData!
}

type UpdateCartBadRequestRes implements StandardResponse {
    status: String!
    message: String!
    data: UpdateCartBadRequestData!
}

type RemoveCartSucceesRes implements StandardResponse {
    status: String!
    message: String!
    data: RemoveCartData!
}

type AddProductSucceesRes implements StandardResponse {
    status: String!
    message: String!
    Data: CreateOrUpdateData!
}

type AddProductBadRequestRes implements StandardResponse {
    status: String!
    message: String!
    Data: AddProductBadRequestData!
}

type PermissionDeniedRes implements StandardResponse {
    status: String!
    message: String!
    Data: DataError!
}

type UpdateProductSucceesRes implements StandardResponse {
    status: String!
    message: String!
    data: CreateOrUpdateData!
}

type UpdateProductBadRequestRes implements StandardResponse {
    status: String!
    message: String!
    data: DataError!
}

type AddProductBadRequestData {
    stock: String!
}

type RemoveCartData {
    id: ID
}

type UpdateCartBadRequestData {
    value: String!
}

type CartData{
    id: ID
    product_id: ID
    product_name: String!
    unit_price: Float!
    currency: String!
    image_url: String!
    uri: String!
}

type AddCartData {
    product_id: String!
}

type DeleteFavoriteBadRequestData {
    favorite_id: String!
}

type DeleteFavoriteData {
    id: ID!
}


type GetUserFavoritesData {
    id: ID!
    product_id: ID!
    product_name: String!
    unit_price: Float!
    currency: String!
    image_url: String!
    uri: String!

}

type AddFavoriteBadRequest {
    product_id: String!
}

type CreateOrUpdateData {
    id: ID!
    created_at: Timestamp!
}

type ResetPasswordBadRequestData {
    new_password: String!
}

type ResetPasswordData {
    id: ID
}

type SignUpBadRequestData {
    first_name: String!
}

type ForgotPasswordData {
    id: ID!
}

type DataError {
    error: String!
}

type SignOutData {
    id: ID!
}

type SignUpData {
    id: ID!
}

union SignOutRes = SignOutSuccessRes | InternalServerErrorRes | UnauthorizedRes

union SignInRes = SignInSuccessRes | InternalServerErrorRes

union SignUpRes = SignUpSuccessRes | InternalServerErrorRes | SignUpBadRequestRes

union ForgotPasswordRes = ForgotPasswordSuccessRes | InternalServerErrorRes

union ResetPasswordRes = ResetPasswordSuccessRes | InternalServerErrorRes | ResetPasswordBadRequestRes

union AddFavoriteRes = AddFavoriteSuccessRes | AddFavoriteBadRequestRes | InternalServerErrorRes | UnauthorizedRes

union GetAllUserFavoritesRes = GetAllUserFavoritesSuccessRes | UnauthorizedRes | InternalServerErrorRes

union DeleteFavoriteRes = DeleteFavoriteSuccessRes  | DeleteFavoriteBadRequestRes | UnauthorizedRes | InternalServerErrorRes

union AddCartRes = AddCartSucceesRes | AddCartBadRequestRes | UnauthorizedRes | InternalServerErrorRes

union GetUserCartsRes = GetUserCartsSucceesRes | InternalServerErrorRes | UnauthorizedRes

union UpdateCartRes = UpdateCartSuccessRes | UpdateCartBadRequestRes | InternalServerErrorRes | UnauthorizedRes

union RemoveCartRes = RemoveCartSucceesRes | UnauthorizedRes | InternalServerErrorRes

union AddProductRes = AddProductSucceesRes | AddProductBadRequestRes | PermissionDeniedRes | UnauthorizedRes | InternalServerErrorRes

union UpdateProductRes = UpdateProductSucceesRes  | UpdateProductBadRequestRes | UnauthorizedRes | PermissionDeniedRes | InternalServerErrorRes

type AuthToken {
    bearer_token: String!
}

input SignInReq {
    email: String!
    password: String!
}

input SignUpReq {
    first_name: String!
    last_name: String!
    email: String!
    address: String!
    password: String!
}

input ForgotPasswordReq {
    email: String!
}

input ResetPasswordReq {
    token: String!
    new_password: String!
}

input DeleteFavoriteReq {
    id: ID!
}

input AddFavoriteReq {
    product_id: ID
}

input AddCartReq {
    product_id: ID
    quantity: Int
}

input UpdateCartReq {
    op: String!
    path: String!
    value: Int!
}

input AddProductReq {
    product_name: String!
    description: String!
    stock: Int!
    categories: [ID!]!
    is_available: Boolean!
    image_url: String!
    unit_price: Float!
}

input UpdateProductReq {
    name: String!
    price: Float!
    description: String!
    stock: Int!
    is_available: Boolean!

}

type User {
    id: ID!
    first_name: String!
    last_name: String!
    email: String!
    is_email_verified: Boolean!
    role_id: Int!
    address: String
    password: String!
    created_at: String
    updated_at: String
}

type Product {
    id: ID!
    product_name: String!
    description: String
    stock: Int!
    is_available: Boolean!
    unit_price: Float!
    created_at: String
    updated_at: String
}

type Order {
    id: ID!
    user_id: ID!
    address: String!
    nearby_landmark: String
    created_at: String
    updated_at: String
}

type OrderDetail {
    id: ID!
    order_id: ID!
    product_id: ID!
    quantity: Int!
    unit_price: Float!
    total_price: Float!
    created_at: String
    updated_at: String
}

type PaymentDetail {
    id: ID!
    payment_intent_id: String!
    payment_method_id: String!
    order_id: ID!
    amount: Float!
    currency: String!
    status_id: Int!
    payment_date: String
    created_at: String
    updated_at: String
}

type Favorites {
    id: ID!
    product_id: ID!
    product_name: String!
    unit_price: Float!
}

type Mutation {
    # auth
    signIn(req: SignInReq!): SignInRes!
    signOut: SignOutRes!

    # user
    signUp(req: SignUpReq): SignUpRes!
    forgotPassword(req: ForgotPasswordReq): ForgotPasswordRes!
    resetPassword(req: ResetPasswordReq): ResetPasswordRes!

    # favorites
    addFavorite(req: AddFavoriteReq): AddFavoriteRes!
    removeFavorite(req: DeleteFavoriteReq): DeleteFavoriteRes!

    # carts
    addCart(req:  AddCartReq!): AddCartRes!
    updateCart(cartId: ID!, req: UpdateCartReq!): UpdateCartRes!
    removeCart(cartID: ID!): RemoveCartRes!

    # products
    addProduct(req: AddProductReq!): AddProductRes! # agregar schema request y response
    updateProduct(product_id: ID!, req: UpdateProductReq): UpdateProductRes!
    # removeProduct(id: ID!): RemoveProductRes!
    # updateProductCategories(product_id: ID!, req: UpdateProductCategoriesReq!): UpdateProductCategoriesRes!
    # updateProductImages(product_id: ID!, req UpdateProductImageReq!): UpdateProductImageRes!

}

type Query {
    getAllUserFavorites: GetAllUserFavoritesRes!
    getUserCarts: GetUserCartsRes!
    # getProducts: GetProductsRes # agregar paginacion
    # getProduct(product_id: ID!): GetProductRes # agregar
}