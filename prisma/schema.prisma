// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma Client Generator
generator client {
  provider = "prisma-client-js"
}

// PostgreSQL Database Configuration
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRoleType {
  MANAGER
  CLIENT
}

enum TokenType {
  VERIFICATION_EMAIL
  RESET_PASSWORD
}

enum StatusPaymentType {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id                 String                @id @default(uuid())
  first_name         String
  last_name          String
  email              String                @unique
  is_email_verified  Boolean
  role_id            Int                   @default(2)
  address            String
  password           String
  created_at         DateTime              @default(now())
  updated_at         DateTime              @default(now())   @updatedAt

  role               UserRole              @relation(fields: [role_id], references: [id])
  carts              Cart[]
  orders             Order[]
  favorites          Favorite[]
  verificationTokens VerificationToken[]
  @@index([email, id])
}

model UserRole {
  id         Int       @id @default(autoincrement())
  role       UserRoleType
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt

  users      User[]
}

model VerificationToken {
  id             String                @id @default(uuid())
  token          String                @unique
  user_id        String
  token_type_id  Int
  is_used        Boolean
  expired_at     DateTime
  created_at     DateTime              @default(now())
  updated_at     DateTime              @default(now())  @updatedAt

  user           User                  @relation(fields: [user_id], references: [id])
  tokenType      VerificationTokenType @relation(fields: [token_type_id], references: [id])
  @@index([user_id])
  @@index([expired_at])
}

model VerificationTokenType {
  id                   Int       @id @default(autoincrement())
  token_type           TokenType
  created_at           DateTime  @default(now())
  updated_at           DateTime  @default(now())  @updatedAt

  verificationTokens   VerificationToken[]
}

model Product {
  id           String       @id @default(uuid())
  product_name String
  description  String
  stock        Int
  is_available Boolean
  unit_price   Float
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now())   @updatedAt

  carts        Cart[]
  orderDetails OrderDetail[]
  favorites    Favorite[]
  categories   ProductCategory[]
  images       ProductImage[]
  @@index([id, is_available])
}

model Cart {
  id         String    @id @default(uuid())
  user_id    String
  product_id String
  quantity   Int
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt

  user       User      @relation(fields: [user_id], references: [id])
  product    Product   @relation(fields: [product_id], references: [id])

  @@unique([user_id, product_id])
  @@index([id, user_id])
}

model Order {
  id              String         @id @default(uuid())
  user_id         String
  address         String
  nearby_landmark String
  created_at      DateTime       @default(now())
  updated_at      DateTime       @default(now())  @updatedAt

  user            User           @relation(fields: [user_id], references: [id])
  orderDetails    OrderDetail[]
  paymentDetails  PaymentDetail[]
  @@index([id, user_id])
}

model OrderDetail {
  id          String    @id @default(uuid())
  order_id    String
  product_id  String
  quantity    Int
  unit_price  Float
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())   @updatedAt

  order       Order     @relation(fields: [order_id], references: [id])
  product     Product   @relation(fields: [product_id], references: [id])
  @@index([order_id, product_id, id])
}

model Favorite {
  id         String    @id @default(uuid())
  user_id    String
  product_id String
  created_at DateTime  @default(now())
  updated_at DateTime @default(now()) @updatedAt

  user       User      @relation(fields: [user_id], references: [id])
  product    Product   @relation(fields: [product_id], references: [id])

  @@unique([user_id, product_id])
  @@index([user_id, id])
}

model ProductCategory {
  product_id  String
  category_id Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())   @updatedAt

  product     Product   @relation(fields: [product_id], references: [id])
  category    Category  @relation(fields: [category_id], references: [id])

  @@id([product_id, category_id])
  @@index([product_id, category_id])
}

model Category {
  id           Int          @id @default(autoincrement())
  category_name String
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now())                @updatedAt

  products     ProductCategory[]
}

model ProductImage {
  id         String    @id @default(uuid())
  product_id String
  image_url  String
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt

  product    Product   @relation(fields: [product_id], references: [id])
  @@index([product_id, id])
}

model PaymentDetail {
  id                String         @id @default(uuid())
  payment_intent_id String
  payment_method_id String
  order_id          String
  amount            Int
  status_id         Int            @default(1)
  created_at        DateTime       @default(now())
  updated_at        DateTime       @default(now())        @updatedAt
  payment_date      DateTime

  order             Order          @relation(fields: [order_id], references: [id])
  status            StatusPayment  @relation(fields: [status_id], references: [id])
  @@index([order_id])
}

model StatusPayment {
  id         Int             @id @default(autoincrement())
  status     StatusPaymentType
  created_at DateTime        @default(now())
  updated_at DateTime        @default(now())              @updatedAt

  paymentDetails PaymentDetail[]
}
